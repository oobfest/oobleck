extends ../_layout
block content
  header.dash-titlebar
    .mb-md-0.mb-3
      span.dash-titlebar-title Shows

  #app.dash-boxes.container-fluid
    ul.nav.nav-pills
      li.nav-item
        a.nav-link.active(data-toggle="tab" href="#shows") Shows
      li.nav-item
        a.nav-link(data-toggle="tab" href="#tickets") Tickets
    .tab-content.mt-3
      #shows.tab-pane.fade.show.active
        .box.box-b(v-if="shows.length > 0")
          table.box-table.table.text-center
            thead
              tr
                th 
                  input.form-control(type="text" placeholder="Search day, venue and time" v-model="search")
                th Cap
                th Sold
                th Left
            tbody
              tr(v-for="(show, index) in filteredShows")
                td.text-left 
                  h4 {{show.day}}, {{show.venue}}, {{show.time | time}}
                  ul
                    li(:class="{'font-weight-bold' : act.headliner}" v-for="act in show.acts") {{act.name}}
                  p(v-if="show.price") Price: 
                    a(href="#" @click.prevent="setPrice(show._id)") ${{show.price}}
                  p(v-else) 
                    a(href="#" @click.prevent="setPrice(show._id)") No price set
                  div(v-if="show.tickets.length > 0" ) 
                    h4 
                      a(:href="'#collapse'+index" data-toggle="collapse") Tickets
                    .collapse(:id="'collapse'+index")
                      table.table.table-sm
                        thead
                          tr
                            th Name
                            th Email
                            th Quantity
                            th Type
                            th
                        tbody
                          tr(v-for="ticket in show.tickets")
                            td {{ticket.name}}
                            td {{ticket.email}}
                            td {{ticket.quantity}}

                            td(v-if="ticket.badge") {{formatBadge(ticket.badge)}}
                            td(v-else) 
                              a(:href="'https://www.paypal.com/activity/payment/' + ticket.payment.transactions[0].related_resources[0].sale.id" target="_blank") {{ticket.payment.transactions[0].related_resources[0].sale.id}}

                            td 
                              a(href="#" @click.prevent="removeReservation(show._id, ticket._id)") remove
                  p(v-else) No tickets sold
                  button.btn.btn-secondary.btn-xs(type="button" @click="showId = show._id" data-toggle="modal" data-target="#add-ticket-modal") Add Ticket Reservation
                  | &nbsp;
                  button.btn.btn-secondary.btn-xs(type="button" @click="reserveWithBadge(show._id)") Add Badge Reservation

                td
                  a.digits(href="#" @click.prevent="setCapacity(show._id)") {{show.capacity}}
                td.digits {{show.capacity - show.remaining}}
                td.digits {{show.remaining}}              
        p.m2(v-else) No shows yet

      #tickets.tab-pane.fade

        ul.list-unstyled
          li(v-for="email in Object.keys(tickets)")
            h3.mt-4 {{tickets[email][0].name}} 
              small.badge.badge-light ${{getStats(email)}}
            h6 {{email}}
            table.table.table-sm.mb-0
              tbody.striped(v-for="day in days")
                tr(v-for="ticket in formatTickets(email, day)")
                  td.borderless 
                    span(style="user-select: none") {{ticket.quantity > 1 ? '(' + ticket.quantity + ')' : ''}} 
                    | {{ticket.day}}, {{ticket.time | time}}, {{formatVenue(ticket.venue)}}                  
                  td.text-right.borderless(style="user-select: none")
                    span(v-if="ticket.badge") {{formatBadge(ticket.badge)}}
                    span(v-else-if="ticket.payment") 
                      a(:href="'https://www.paypal.com/activity/payment/' + ticket.payment.transactions[0].related_resources[0].sale.id" target="_blank") PayPal (${{Number(ticket.payment.transactions[0].amount.total)}})
                    span(v-else) n/a
            hr.mt-0
    add-ticket-modal(:show-id="showId")

  script(src="/js/axios.min.js")
  script(src="/js/vue.js")
  script(src="https://cdn.jsdelivr.net/npm/lodash@4.17.10/lodash.min.js" integrity="sha256-/GKyJ0BQJD8c8UYgf7ziBrs/QgcikS7Fv/SaArgBcEI=" crossorigin="anonymous")
  include components/add-ticket
  script.
    let app = new Vue({ 
      el: "#app",
      data() { 
        return {
          shows: [],
          showId: null,
          search: "",
          days: ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday']
        }
      },
      computed: {
        filteredShows() {
          if (this.search == '') return this.shows
          else {
            let searchRegex = new RegExp(this.search, 'i')
            return this.shows.filter(s=> {
              let searchedString = s.day + " " + s.venue + " " + s.time + " " + 
                                   s.venue + " " + s.day + " " + s.time + " " + s.venue
              return searchedString.match(searchRegex)
            })
          }
        },
        tickets() {
          let tickets = []
          for(let i=0; i<this.shows.length; i++) {
            for(let j=0; j<this.shows[i].tickets.length; j++) {
              let ticket = this.shows[i].tickets[j]
              ticket.showId = this.shows[i]._id
              ticket.day = this.shows[i].day
              ticket.venue = this.shows[i].venue
              ticket.time = this.shows[i].time
              ticket.paid = ticket.payment 
                ? Number(ticket.payment.transactions[0].amount.total)
                : 0
              tickets.push(ticket)
            }
          }
          return _.groupBy(tickets, 'email')
        }
      },
      methods: {
        formatTickets(email, day) {
          return this.tickets[email]
            .filter(t => t.day == day)
            .sort((a, b)=> a.time - b.time)
        },
        getStats(email) {
          let paid = 0
          let tickets = this.tickets[email]
          for(let ticket of tickets) {
            paid += ticket.paid
          }
          return paid
        },
        formatVenue(venue) {
          switch(venue) {
            case 'Hideout Down': return 'Hideout Downstairs'
            case 'Hideout Up': return 'Hideout Upstairs'
            case 'ColdTowne': return 'ColdTowne'
            case 'Fallout': return 'Fallout'
            case 'Velveeta': return 'Velveeta Room'
            case 'Spider House': return 'Spider House Ballroom'
            case 'Institution': return 'Institution'
            default: return venue
          }
        },
        formatBadge(badgeType) {
          switch(badgeType) {
            case 'all': return 'All-Access Badge'
            case 'performer-full-upgrade': return 'Performer Badge (Full)'
            case 'performer-weekend-upgrade': return 'Performer Badge (Weekend)'
            case 'staff': return 'Staff'
            default: return badgeType
          }
        },
        reserveWithBadge(showId) {
          let badgeEmail = prompt("Badge email")
          if(badgeEmail == null) return
          let quantity = Number(prompt("Quantity"))
          if(quantity == 0) return

          let self = this
          axios
            .post('/api/shows/badge-reservation/' + showId, {email: badgeEmail, quantity: quantity})
            .then(function(response) {
              if(response.data.reservationSuccessful) {
                let index = self.shows.findIndex(s=> s._id == showId)
                Vue.set(self.shows, index, response.data.savedShow)
              }
              else {
                alert(response.data.message)
              }
            })
            .catch(function(error) {
              alert("Error reserving for show with badge :(")
              console.log(error)
            })
        },
        removeReservation(showId, ticketId) {
          let self = this
          axios
            .post('/api/shows/remove-reservation/' + showId, {ticketId: ticketId})
            .then(function(response) {
              let showIndex = self.shows.findIndex(s=> s._id == showId)
              Vue.set(self.shows, showIndex, response.data)
            })
            .catch(function(error) {
              alert("Error removing reservation from show :(")
              console.log(error)
            })
        },
        setCapacity(id) {
          let capacity = Number(prompt("New capacity"))
          if(capacity == 0) return
          let self = this
          axios
            .post('/api/shows/set-capacity/' + id, {capacity: capacity})
            .then((response)=> {
              let index = self.shows.findIndex(s=> s._id == id)
              Vue.set(self.shows, index, response.data)
            })
            .catch((error)=> {
              alert("Failed to set capacity for show :(")
              console.log(error)
            })
        },
        setPrice(id) {
          let price = prompt("New price")
          if(price == null) return
          else price = Number(price)

          let self = this
          axios
            .post('/api/shows/set-price/' + id, {price: price})
            .then((response)=> {
              let index = self.shows.findIndex(s=> s._id == id)
              Vue.set(self.shows, index, response.data)
            })
            .catch((error)=> {
              alert("Failed to set price for show :(")
              console.log(error)
            })

        }
      },
      filters: {
        time(time) {
          time = String(time)
          return time.slice(0, time.length-2) + ":" + time.slice(time.length-2) + "pm"
        },
      },
      created() {
        let self = this
        axios
          .get('/api/shows/')
          .then(function(response) {
            self.shows = response.data
          })
          .catch(function(error) {
            alert("Error getting shows :(")
            console.log(error)
          })
      }
    })

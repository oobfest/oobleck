#submissions.tab-pane.fade.show.active
	#submissions-vue-app
		h4.mt-3 #{submissions.length} Submissions,  
			span.badge.badge-primary=reviewedSubmissionCount
			|  Reviewed,  
			span.badge.badge-success=completedSubmissionCount
			|  Completed.  

		.progress.mb-3(style="height: 2em")
			.progress-bar(style="width: " + (percentReviewed - percentComplete) + '%; height: 100px') 
			.progress-bar.bg-success(style="width: " + percentComplete + '%') 
				
		.box.box-b
			table.table.box-table
				thead
					tr
						th
							a(@click.prevent="sortBy('actName')" href="#") Act
								span.arrow.asc(v-show="sortState.actName")
								span.arrow.dsc(v-show="sortState.actName === false")
						th 
							a(@click.prevent="sortByScore" href="#") Score
								span.arrow.asc(v-show="sortState.score")
								span.arrow.dsc(v-show="sortState.score === false")
						th 
							a(@click.prevent="sortBy('showType')" href="#") Type
								span.arrow.asc(v-show="sortState.showType")
								span.arrow.dsc(v-show="sortState.showType === false")
						th 
							a(@click.prevent="sortBy('city')" href="#") City
								span.arrow.asc(v-show="sortState.city")
								span.arrow.dsc(v-show="sortState.city === false")
						th 
							a(@click.prevent="sortBy('homeTheater')" href="#") Theater
									span.arrow.asc(v-show="sortState.homeTheater")
									span.arrow.dsc(v-show="sortState.homeTheater === false")
				tbody
					tr
						td 
							input.form-control(type="text" placeholder="Filter by Name" v-model="searchByName")
						td
						td
							select.form-control(v-model="filterByType")
								option(selected value="") All
								option Improv
								option Sketch
								option Stand-Up
								option Variety
								option Podcast
								option Individual
								option Other
						td
							input.form-control(type="text" placeholder="Filter by City" v-model="searchByCity")
						td
							input.form-control(type="text" placeholder="Filter by Theater" v-model="searchByTheater")
						td
						td
					tr(v-for="submission in filteredSubmissions")
						td
							a(:href="'/submissions/submission/' + submission.domain" ,:title="submission.actName") {{submission.actName | shorten(42) }}
						td
							a(:href="'/submissions/reviews/' + submission.domain") {{submission.reviews | filterReviews}}
						td {{submission.showType}}
						td {{submission.city}}, {{submission.state}}
						td(:title="submission.homeTheater") {{ (submission.homeTheater || "") | shorten(25) }}
						td
							a(:href="'/submissions/edit/' + submission._id") Edit

script.

	let vm = new Vue({
		el: "#submissions-vue-app",
		data() {
			return {
				submissions: [],
				searchByName: "",
				searchByTheater: "",
				searchByCity: "",
				filterByType: "",
				sortState: {
					actName: 		null,
					showType: 		null,
					homeTheater: 	null,
					city: 			null,
					score: 			null
				}
			}
		},
		methods: {
			sortBy(property) {
				if (this.sortState[property]) {
					this.submissions.sort((a, b) => 
						(typeof a[property] != 'undefined' ?a[property].toLowerCase() :null) <
						(typeof b[property] != 'undefined' ?b[property].toLowerCase() :null)
					)
					let self = this
					Object.keys(this.sortState).forEach(function(key) {return self.sortState[key]=null})
					this.sortState[property] = false
				}
				else {
					this.submissions.sort((a, b) => 
						(typeof a[property] != 'undefined' ?a[property].toLowerCase() :null) >
						(typeof b[property] != 'undefined' ?b[property].toLowerCase() :null)
					)
					let self = this
					Object.keys(this.sortState).forEach(function(key) {return self.sortState[key]=null})
					this.sortState[property] = true
				}
			},
			sortByScore() {
				if(this.sortState.score) {
					this.submissions.sort((a,b)=> 
						(typeof a.reviews != 'undefined' ?a.reviews.length :0) >
						(typeof b.reviews != 'undefined' ?b.reviews.length :0)
					)
					let self = this
					Object.keys(this.sortState).forEach(function(key) {return self.sortState[key]=null})
					this.sortState.score = false
				}
				else {
					this.submissions.sort((a,b)=>
						(typeof a.reviews != 'undefined' ?a.reviews.length :0) <
						(typeof b.reviews != 'undefined' ?b.reviews.length :0)
					)
					let self = this
					Object.keys(this.sortState).forEach(function(key) {return self.sortState[key]=null})
					this.sortState.score = true
				}
			},
			filter(type) {
				this.visibleTypes[type] = !(this.visibleTypes[type])
			}
		},
		computed: {
			filteredSubmissions() {

				// Filter by search queries
				let actNameFilter = new RegExp(this.searchByName, 'i')
				let cityFilter = new RegExp(this.searchByCity, 'i')
				let theaterFilter = new RegExp(this.searchByTheater, 'i')

				let filtered = this.submissions
					.filter(s=> s.actName.match(actNameFilter))
					.filter(s=> s.city.match(cityFilter))

				// Deal with undefined for optional 'home theater' property
				for(let i=0; i<filtered.length; i++) {
					if (typeof filtered[i].homeTheater == 'undefined') {
						filtered[i].homeTheater = ""
						//console.log(filtered[i])
					}
				}

				filtered = filtered.filter(s=>s.homeTheater.match(theaterFilter))

				if (this.filterByType !== '') filtered = filtered.filter(s=> s.showType == this.filterByType)

				return filtered
			}
		},
		filters: {
			filterReviews(reviews) {
				let pretty = ""
				for (let i=0; i<reviews.length; i++) {
					switch(reviews[i].score) {
						case -1: pretty+='😡'; break;
						case  0: pretty+='😕'; break;
						case  1: pretty+='😬'; break;
						case  2: pretty+='😍'; break;
						default: break;
					}	
				}
				return pretty
			},
			shorten(value, characters) {
				return value.length > characters
					? value.substring(0,characters)+'...'
					: value
			}
		},
		mounted() {
			let self = this
			axios
				.get('/api/submissions/getAllPaid')
				.then(function(response) {
					self.submissions = response.data
					self.sortBy('actName')
				})
				.catch(function(error) {
					self.submissions = []
				})
		}
	})
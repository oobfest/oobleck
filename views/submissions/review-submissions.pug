extends ../_layout
block content
	header.dash-titlebar
		.mb-md-0.mb-3
			span.dash-titlebar-title Review Submissions

	.dash-boxes.container-fluid
		#vue-app
			.row
				.col-md
					.card.text-center.mb-3(class=(votes.yes <= 12) ?'border-success' :'border-danger')
						.card-body.text-success(class=(votes.yes <= 12) ?'text-success' :'text-danger')
							p.card-title Yes 😍
							h3.card-text=votes.yes
				.col-md
					.card.text-center.mb-3.border-success
						.card-body.text-success
							p.card-title Meh 😬
							h3.card-text=votes.meh
				.col-md
					.card.text-center.mb-3.border-success
						.card-body.text-success
							p.card-title Nah 😕
							h3.card-text=votes.nah
				.col-md
					.card.text-center.mb-3(class=(votes.veto <= 5) ?'border-success' :'border-danger')
						.card-body(class=(votes.veto <= 5) ?'text-success' :'text-danger')
							p.card-title Veto 😡
							h3.card-text=votes.veto
			.row
				.col-sm-3
					.form-group.mb-0
						input.form-control(type="text" placeholder="Search by name" v-model="searchQuery")
			.box.box-b
				table.box-table.table
					thead
						tr
							th
								a(@click.prevent="sortByName" href="#") Name
									span.arrow.asc(v-show="sortState==SORT_STATE.ACT_NAME_ASC")
									span.arrow.dsc(v-show="sortState==SORT_STATE.ACT_NAME_DSC")
							th
								a(@click.prevent="sortByReviews" href="#") Reviews
									span.arrow.asc(v-show="sortState==SORT_STATE.REVIEWS_ASC")
									span.arrow.dsc(v-show="sortState==SORT_STATE.REVIEWS_DSC")
							th 
								a(@click.prevent="sortByScore" href="#") Your Score
									span.arrow.asc(v-show="sortState==SORT_STATE.SCORE_ASC")
									span.arrow.dsc(v-show="sortState==SORT_STATE.SCORE_DSC")
							th Notes
					tbody
						tr(v-for="submission in filteredSubmissions")
							td 
								a(:href="'/submissions/review/' + submission._id") {{submission.actName}}
							td
								span.badge.badge-danger(v-show="submission.reviews.length ==0") No Reviews
								span.badge.badge-primary(v-show="submission.reviews.length > 0 && submission.reviews.length < 5") {{submission.reviews.length}} Reviews
								span.badge.badge-success(v-show="submission.reviews.length >=5") Success! {{submission.reviews.length}}
								
							td {{submission.review ? submission.review.score : -2 | emojify}}
							td {{submission.review ? submission.review.notes : ''}}

	script(src="/js/vue.min.js")
	script(src="/js/axios.min.js")
	script.

		let vm = new Vue({
			el: "#vue-app",
			methods: {
				sortByName() {
					if (this.sortState==this.SORT_STATE.ACT_NAME_DSC) {
						this.submissions.sort((a, b) => a.actName.toLowerCase() < b.actName.toLowerCase() ? 1 : -1)
						this.sortState = this.SORT_STATE.ACT_NAME_ASC
					}
					else {
						this.submissions.sort((a, b) => a.actName.toLowerCase() > b.actName.toLowerCase() ? 1 : -1)
						this.sortState = this.SORT_STATE.ACT_NAME_DSC
					}
				},
				sortByReviews() {
					if (this.sortState==this.SORT_STATE.REVIEWS_DSC) {
						this.submissions.sort((a, b) => a.reviews.length < b.reviews.length ? 1 : -1)
						this.sortState = this.SORT_STATE.REVIEWS_ASC
					}
					else {
						this.submissions.sort((a, b) => a.reviews.length > b.reviews.length ? 1 : -1)
						this.sortState = this.SORT_STATE.REVIEWS_DSC
					}
				},
				sortByScore() {
					if(this.sortState==this.SORT_STATE.SCORE_DSC) {
						this.submissions.sort((a,b)=>
							(typeof a.review != 'undefined' ?a.review.score :3) >
							(typeof b.review != 'undefined' ?b.review.score :3)
						)
						this.sortState = this.SORT_STATE.SCORE_ASC
					}
					else {
						this.submissions.sort((a,b)=>
							(typeof a.review != 'undefined' ?a.review.score :-2) <
							(typeof b.review != 'undefined' ?b.review.score :-2)
						)
						this.sortState = this.SORT_STATE.SCORE_DSC
					}
				}
			},
			data() {
				return {
					userId: '#{user._id}',
					userRoles: '#{user.roles}',
					sortState: null,
					SORT_STATE : {
						ACT_NAME_ASC: 	0,
						ACT_NAME_DSC: 	1,
						REVIEWS_ASC: 	2,
						REVIEWS_DSC: 	3,
						SCORE_ASC: 		4,
						SCORE_DSC: 		5
					},
					submissions: [],
					searchQuery: "",
				}
			},
			computed: {
				filteredSubmissions() {
					// Filter by search query
					let filter = new RegExp(this.searchQuery, 'i')
					let filteredSubmissions = this.submissions.filter(s => s.actName.match(filter))

					// Get user's review
					filteredSubmissions.map(fs=> { fs.review = fs.reviews.find(r=> r.userId == this.userId)})

					return filteredSubmissions
				}
			},
			filters: {
				emojify(value) {
					switch(value) {
						case -1: return '😡 Veto'
						case  0: return '😕 Nah'
						case  1: return '😬 Meh'
						case  2: return '😍 Yes!'
						default: return ''
					}
				}
			},
			mounted() {
				let self = this
				let url = '/api/submissions/'
				if(self.userRoles.indexOf('schedule') !== -1) url+='getAllPaid'
				else if(self.userRoles.indexOf('admin') !== -1) url+='getAllPaid'
				else if(self.userRoles.indexOf('standup-panelist') !== -1) url+='getAllPaidStandup'
				else if(self.userRoles.indexOf('panelist') !== -1) url+='getAllPaidExceptStandup'
				console.log(self.userRoles, url)
				axios
					.get(url)
					.then(function(response) {
						self.submissions = response.data
						self.sortByReviews()
					})
					.catch(function(error) {
						self.submissions = []
					})
			}
		})




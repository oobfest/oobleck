extends ../_layout
block content
  header.dash-titlebar
    .mb-md-0.mb-3
      span.dash-titlebar-title Badges

  #app.dash-boxes.container-fluid
    p(v-if="total") Total: {{total}}
    .box.box-b
      table.table.box-table
        thead
          tr
            th Name
            th Email
            th Phone
            th Badge Type
            th Quantity
        tbody(v-for="badge, index in badges")
          tr(style="background-color: white")
            td 
              a(:href="'#collapse-' + index" data-toggle="collapse") {{badge.name}}
            td {{badge.email}}
            td {{badge.phone}}
            td 
              span.badge.badge-pill(:class="getBadgeClass(badge.type)") {{getBadgeName(badge.type)}}
            td {{badge.quantity}}
          tr.collapse(:id="'collapse-' + index")
            td(colspan=5)
              div(v-if="badge.payment && badge.payment.create_time")
                h3 Payment Made
                pre {{formatDate(badge.payment.create_time)}}
                h3 Transaction ID
                p.code
                  a(:href="'https://www.paypal.com/activity/payment/' + badge.payment.transactions[0].related_resources[0].sale.id" target="_blank") {{badge.payment.transactions[0].related_resources[0].sale.id}}
              //button.btn.btn-danger(type="button" @click="destroy(badge._id, index)") Delete

  script(src="/js/axios.min.js")
  script(src="/js/vue.js")
  script(src="/js/vue-markdown.js")
  script.
    let app = new Vue({ 
      el: "#app",
      data() { 
        return {
          badges: [],
        }
      },
      computed: {
        total() {
          if(this.badges.length == 0) return null
          return this.badges.reduce((total, badge)=> {return total + badge.quantity}, 0)
        }
      },
      methods: {
        formatDate(date) {
          return new Date(Date.parse(date)).toLocaleString('en-US')
        },
        getBadgeName(type) {
          if(type=='all') return "All-Access"
          if(type=='performer-weekend-upgrade') return "Weekend Upgrade"
          if(type=='performer-all') return "Full Upgrade"
          else return "error"
        },
        getBadgeClass(type) {
          if(type=='all') return "badge-primary"
          if(type=='performer-weekend-upgrade') return "badge-info"
          if(type=='performer-all') return "badge-success"
          else return "badge-danger"
        },
        destroy(id, index) {
          if (confirm("Delete badge? This is probably a bad idea.")) {
            let self = this
            axios
              .delete('/api/badges/' + id)
              .then(function(response) {
                self.badges.splice(index, 1)
              })
              .catch(function(error) {
                alert("Error deleting badge :(")
              })
          }
        }
      },
      created() {
        let self = this
        axios
          .get('/api/badges')
          .then(function(response) {
            self.badges = response.data
          })
          .catch(function(error) {
            alert("Error getting badges :(")
            console.log(error)
          })
      }
    })
extends ../_layout
block content
	#vue-app.dash-boxes.container-fluid
		.row
			.col
				a(@click.prevent="fullscreen" href="#") Toggle Navigation
				h3.text-center OoB 2018
				.box.box-b(v-for="day in Object.keys(schedule)")
					.box-head.box-bb.p-2(:class="day")
						h4.mb-0 {{day | capitalize}}
						small 
							a(@click.prevent="addVenue(day, 'fallout')" href="#") Add Venue

					table.table.box-table.schedule
						thead
							tr
								th.text-center(v-for='venue in Object.keys(schedule[day])')
									img(:src="venue | logoify" ,:alt="venue | capitalize" width="50px" height="auto")
									p.mb-0
										small
											a(@click.prevent="stub" href="#") Remove Venue
						tbody
							tr
								td(v-for='venue in Object.keys(schedule[day])')
									.time-slot(v-for='time in Object.keys(schedule[day][venue])')
										p.mb-0.time(:class="day") {{time}}
											small.float-right
												a(@click.prevent="stub" href="#") remove time
										.act-slot(v-for='act in schedule[day][venue][time].acts')
											strong 
												a(href="#") {{act.name}}
											| &nbsp;
											em.badge(:class="getClass(act.type)") {{act.type | capitalize}}
											| &nbsp;
											.score.veto
											.score.nah
											small
												a(@click.prevent="stub" href="#").float-right remove act
										button.btn.btn-xs.btn-outline-secondary.btn-block(@click.prefent="stub") + add act

							tr
								td(v-for='venue in Object.keys(schedule[day])')
									button.btn.btn-sm.btn-outline-primary.btn-block + add time
									
	
	script(src="/js/axios.min.js")
	script(src="/js/vue.js")
	script.
		new Vue({
			el: "#vue-app",
			data() {
				return {
					isFullscreen: false,
					submissions: [],
					schedule: {
						tuesday: {
							coldtowne: {
								'0700': {
									acts: [
										{name: 'Frank Mills', type:'improv'},
										{name: 'Loverboy', type: 'sketch'}
									]
								},
								'0830': {
									acts: [
										{name: 'Movie Riot', type: 'standup'},
										{name: 'SheSheSheShe', type: 'podcast'}
									]
								}
							},
							hideoutUp: {
								'0800': {
									acts: [
										{name: 'PGraph', type: 'other'},
										{name: 'Minority Report', type: 'variety'}
									]
								},
								'1000': {
									acts: []
								}
							},
							fallout: {
								'0900': {
									acts: []
								}
							}
						},
						wednesday: {
							coldtowne: {},
							hideout: {}
						},
						thursday: {},
						friday: {},
						saturday: {},
						sunday: {},
						monday: {}
					}
				}
			},
			methods: {
				fullscreen() {
					if(this.isFullscreen) {
						document.getElementById("dash-nav").style.display = 'flex';
						document.getElementsByTagName("main")[0].style["margin-left"] = '206px'
						document.getElementsByClassName('dash-toolbar')[0].style.left = '206px'
					}
					else {
						document.getElementById("dash-nav").style.display = 'none';
						document.getElementsByTagName("main")[0].style["margin-left"] = 0
						document.getElementsByClassName('dash-toolbar')[0].style.left = 0
					}
					this.isFullscreen = !this.isFullscreen
				},
				getClass(showType) {
					switch(showType) {
						case 'improv': 	return 'badge-improv'
						case 'sketch': 	return 'badge-sketch'
						case 'standup': return 'badge-standup'
						case 'podcast': return 'badge-podcast'
						case 'other': 	return 'badge-other'
						case 'variety': return 'badge-variety'

					}
				},
				addVenue(day, venue) {
					if(typeof this.schedule[day][venue] == 'undefined')
						this.$set(this.schedule[day], venue, {})
					else
						alert("Venue already added")
				},
				stub() {
					alert("Clicky")
				}
			},
			filters: {
				capitalize(string) {
					if (string=='coldtowne') return 'ColdTowne'
					if (string=='spiderHouse') return 'Spider House'
					else return string.charAt(0).toUpperCase() + string.slice(1)
				},
				logoify(theater) {
					switch(theater) {
						case 'coldtowne': return '/img/venues/coldtowne.png'
						case 'hideout': 
						case 'hideoutUp':
						case 'hideoutDown': return '/img/venues/hideout.png'
						case 'fallout': return '/img/venues/fallout.png'
						case 'spiderHouse': return '/img/venues/spider-house.png'
						default: return ''
					}
				}
			},
			mounted() {
				let self = this
				axios
					.get("/api/submissions")
					.then(function(response) {
						self.submissions = response.data.filter(rd=> rd.paymentInfo)						
					})
					.catch(function(error) {
						self.submissions = []
					})
				self.fullscreen()
			}
		})
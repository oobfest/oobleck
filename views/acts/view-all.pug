extends ../_layout
block content
  header.dash-titlebar
    .mb-md-0.mb-3
      span.dash-titlebar-title Acts
    a.btn.btn-secondary.ml-md-auto(href="/acts/create") Create Act

  #app.dash-boxes.container-fluid

    ul.nav.nav-pills
      li.nav-item
        a.nav-link.active(data-toggle="tab" href="#home") Acts
      li.nav-item
        a.nav-link(data-toggle="tab" href="#other") Performers

    .tab-content
      #home.tab-pane.show.active
        .box.box-b
          table.box-table.table
            thead
              tr
                th
                th Name
                th Type
            tbody
              tr
                th
                th
                  input.form-control(type="text" v-model="filterByName" placeholder="Search by Name")
                th
                  select.form-control(v-model="filterByType")
                    option(selected value="") All
                    option Improv
                    option Sketch
                    option Stand-Up
                    option Individual
                    option Music
              tr(v-for="act in filteredActs")
                td.text-center {{act.confirmationStatus === 'no' ? '⛔️' : act.confirmationStatus === 'reschedule' ? '🚸' : act.confirmationStatus === 'yes' ? '✅' : ''}}
                td 
                  a(@click.prevent="clicky(act)" href="#" data-toggle="modal" data-target="#act-modal") {{act.actName}}
                td {{act.showType}}
      #other.tab-pane
        .box.box-b
          table.box-table.table
            thead
              tr
                th Name
                th Act
                th Type
                th Email
            tbody
              tr
                th
                  input.form-control(type="text" v-model="filterPerformersByName" placeholder="Search by Name")
                th
                  input.form-control(type="text" v-model="filterPerformersByAct" placeholder="Search by Act")
                th
                  select.form-control(v-model="filterPerformersByType")
                    option(selected value="") All
                    option Improv
                    option Sketch
                    option Stand-Up
                    option Individual
                    option Music
              tr(v-for="performer in filteredPerformers")
                td {{performer.name}}
                td 
                  a(href="#" @click.prevent="clicky2(performer.actId)" data-toggle="modal" data-target="#act-modal") {{performer.act}}
                td {{performer.type}}
                td {{performer.email}}
    act-modal(:act="currentAct")  
  
  include components/act-modal
  script(src="/js/axios.min.js")
  script(src="/js/vue.js")
  script.
    Vue.component('act-modal', {
      template: "#act-modal-template",
      props: ['act']
    })

    let app = new Vue({ 
      el: "#app",
      data() { 
        return {
          acts: [],
          performers: [],
          currentAct: {name: "YAY", additionalMembers:[], bonusShows: [], socialMedia:[], videoUrls: []},
          filterByName: '',
          filterByType: '',
          filterPerformersByName: '',
          filterPerformersByAct: '',
          filterPerformersByType: ''
        }
      },
      computed: {
        filteredActs() {
          let filteredActs = this.acts
          if (this.filterByType !== '') filteredActs = filteredActs.filter(a=> a.showType === this.filterByType)
          if (this.filterByName !== '') filteredActs = filteredActs.filter(a=> a.actName.match(new RegExp(this.filterByName, 'i')))
          filteredActs.sort((a, b)=> { return a.actName.localeCompare(b.actName)})
          return filteredActs
        },
        filteredPerformers() {
          let filteredPerformers = this.performers
          if (this.filterPerformersByType !== '') filteredPerformers = filteredPerformers.filter(a=> a.type === this.filterPerformersByType)
          if (this.filterPerformersByName !== '') filteredPerformers = filteredPerformers.filter(a=> a.name.match(new RegExp(this.filterPerformersByName, 'i')))
          if (this.filterPerformersByAct !== '') filteredPerformers = filteredPerformers.filter(a=> a.act.match(new RegExp(this.filterPerformersByAct, 'i')))
          filteredPerformers.sort((a, b)=> { return a.name.localeCompare(b.name)})
          return filteredPerformers          
        }
      },
      methods: {
        clicky(selectedAct) {
          this.currentAct = selectedAct
        },
        clicky2(actId) {
          this.currentAct = this.acts.find(a=> a._id===actId)
        }
      },
      created() {
        let self = this
        axios
          .get('/api/submissions/get-all-accepted')
          .then(function(response) {
            self.acts = response.data
            let performers = []
            for(let i=0; i<self.acts.length; i++) {
              performers.push({
                name: self.acts[i].primaryContactName,
                email: self.acts[i].primaryContactEmail,
                act: self.acts[i].actName,
                actId: self.acts[i]._id,
                type: self.acts[i].showType
              })
              for(let j=0; j<self.acts[i].additionalMembers.length; j++) {
                performers.push({
                  name: self.acts[i].additionalMembers[j].name,
                  email: self.acts[i].additionalMembers[j].email,
                  act: self.acts[i].actName,
                  actId: self.acts[i]._id,
                  type: self.acts[i].showType
                })
              }
            }
            self.performers = performers
          })
          .catch(function(error) {
            alert("Error getting acts :(")
            console.log(error)
          })
      }
    })

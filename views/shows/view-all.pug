extends ../_layout
block content
  header.dash-titlebar
    .mb-md-0.mb-3
      span.dash-titlebar-title Shows

  #app.dash-boxes.container-fluid
    .box.box-b(v-if="shows.length > 0")
      table.box-table.table.text-center
        thead
          tr
            th 
              input.form-control(type="text" placeholder="Search day, venue and time" v-model="search")
            th Cap
            th Sold
            th Left
        tbody
          tr(v-for="(show, index) in filteredShows")
            td.text-left 
              h4 {{show.day}}, {{show.venue}}, {{show.time | time}}
              ul
                li(:class="{'font-weight-bold' : act.headliner}" v-for="act in show.acts") {{act.name}}
              p(v-if="show.price") Price: 
                a(href="#" @click.prevent="setPrice(show._id)") ${{show.price}}
              p(v-else) 
                a(href="#" @click.prevent="setPrice(show._id)") No price set
              div(v-if="show.tickets.length > 0" ) 
                h4 
                  a(:href="'#collapse'+index" data-toggle="collapse") Tickets
                .collapse(:id="'collapse'+index")
                  table.table.table-sm
                    thead
                      tr
                        th Name
                        th Email
                        th Quantity
                        th Type
                        th
                    tbody
                      tr(v-for="ticket in show.tickets")
                        td {{ticket.name}}
                        td {{ticket.email}}
                        td {{ticket.quantity}}

                        td(v-if="ticket.badge") {{formatBadge(ticket.badge)}}
                        td(v-else) 
                          a(:href="'https://www.paypal.com/activity/payment/' + ticket.payment.transactions[0].related_resources[0].sale.id" target="_blank") {{ticket.payment.transactions[0].related_resources[0].sale.id}}

                        td 
                          a(href="#" @click.prevent="removeReservation(show._id, ticket._id)") remove
              p(v-else) No tickets sold
              button.btn.btn-secondary.btn-xs(type="button" @click="showId = show._id" data-toggle="modal" data-target="#add-ticket-modal") Add Ticket Reservation
              | &nbsp;
              button.btn.btn-secondary.btn-xs(type="button" @click="reserveWithBadge(show._id)") Add Badge Reservation

            td
              a.digits(href="#" @click.prevent="setCapacity(show._id)") {{show.capacity}}
            td.digits {{show.capacity - show.remaining}}
            td.digits {{show.remaining}}              
    p.m2(v-else) No shows yet
    add-ticket-modal(:show-id="showId")

  script(src="/js/axios.min.js")
  script(src="/js/vue.js")
  include components/add-ticket
  script.
    let app = new Vue({ 
      el: "#app",
      data() { 
        return {
          shows: [],
          showId: null,
          search: ""
        }
      },
      computed: {
        filteredShows() {
          if (this.search == '') return this.shows
          else {
            let searchRegex = new RegExp(this.search, 'i')
            return this.shows.filter(s=> {
              let searchedString = s.day + " " + s.venue + " " + s.time + " " + 
                                   s.venue + " " + s.day + " " + s.time + " " + s.venue
              return searchedString.match(searchRegex)
            })
          }
        }
      },
      methods: {
        formatBadge(badgeType) {
          switch(badgeType) {
            case 'all': return 'All-Access Badge'
            case 'performer-full-upgrade': return 'Performer Badge (Full)'
            case 'performer-weekend-upgrade': return 'Performer Badge (Weekend)'
            case 'staff': return 'Staff'
            default: return badgeType
          }
        },
        reserveWithBadge(showId) {
          let badgeEmail = prompt("Badge email")
          if(badgeEmail == null) return
          let quantity = Number(prompt("Quantity"))
          if(quantity == 0) return

          let self = this
          axios
            .post('/api/shows/badge-reservation/' + showId, {email: badgeEmail, quantity: quantity})
            .then(function(response) {
              if(response.data.reservationSuccessful) {
                let index = self.shows.findIndex(s=> s._id == showId)
                Vue.set(self.shows, index, response.data.savedShow)
              }
              else {
                alert(response.data.message)
              }
            })
            .catch(function(error) {
              alert("Error reserving for show with badge :(")
              console.log(error)
            })
        },
        removeReservation(showId, ticketId) {
          let self = this
          axios
            .post('/api/shows/remove-reservation/' + showId, {ticketId: ticketId})
            .then(function(response) {
              let showIndex = self.shows.findIndex(s=> s._id == showId)
              Vue.set(self.shows, showIndex, response.data)
            })
            .catch(function(error) {
              alert("Error removing reservation from show :(")
              console.log(error)
            })
        },
        setCapacity(id) {
          let capacity = Number(prompt("New capacity"))
          if(capacity == 0) return
          let self = this
          axios
            .post('/api/shows/set-capacity/' + id, {capacity: capacity})
            .then((response)=> {
              let index = self.shows.findIndex(s=> s._id == id)
              Vue.set(self.shows, index, response.data)
            })
            .catch((error)=> {
              alert("Failed to set capacity for show :(")
              console.log(error)
            })
        },
        setPrice(id) {
          let price = prompt("New price")
          if(price == null) return
          else price = Number(price)

          let self = this
          axios
            .post('/api/shows/set-price/' + id, {price: price})
            .then((response)=> {
              let index = self.shows.findIndex(s=> s._id == id)
              Vue.set(self.shows, index, response.data)
            })
            .catch((error)=> {
              alert("Failed to set price for show :(")
              console.log(error)
            })

        }
      },
      filters: {
        time(time) {
          time = String(time)
          return time.slice(0, time.length-2) + ":" + time.slice(time.length-2) + "pm"
        },
      },
      created() {
        let self = this
        axios
          .get('/api/shows/')
          .then(function(response) {
            self.shows = response.data
          })
          .catch(function(error) {
            alert("Error getting shows :(")
            console.log(error)
          })
      }
    })
